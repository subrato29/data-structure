/**
 * Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
Example 4:

Input: nums = [1,3,5,6], target = 0
Output: 0
Example 5:

Input: nums = [1], target = 0
Output: 0

 */
package leetcode.binarySearch;

public class SearchInsert {
	
	public int searchInsert(int[] nums, int target) {
       return helper(nums, target, 0, nums.length - 1);
    }
	
	public static int helper(int nums[], int target, int left, int right) {
	    while (left <= right) {
	        int mid = left + (right - left) / 2;
	        int potentialMatch = nums[mid];
	        if (potentialMatch > target) {
	            right = mid - 1;
	        } else if (potentialMatch < target) {
	            left = mid + 1;
	        } else {
	            return mid;
	        }
	    }
	    return left;
    }
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
